name: Terraform

on:
  workflow_dispatch:
    inputs:
      apply:
        description: Select for Terraform Apply
        required: true
        type: boolean
  # push:
  #   branches: [ "master" ]
  # pull_request:

permissions:
  contents: read

jobs:
  terraform-plan:
    if: ${{! inputs.apply }}
    name: Terraform Plan
    runs-on: self-hosted
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses:
          actions/checkout@v3

          # https://github.com/actions/setup-node
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses:
          hashicorp/setup-terraform@v2
          #access vault for creds

      - name: Import Secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_HOST }}
          tlsSkipVerify: true
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            pylot/data/cluster_info VAULT_ADDR | TF_VAR_VAULT_ADDR ;
            pylot/data/cluster_info ROLE_ID | TF_VAR_VAULT_ROLE_ID ;
            pylot/data/cluster_info SECRET_ID | TF_VAR_VAULT_SECRET_ID ;

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -diff

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

  terraform_apply:
    if: ${{ inputs.apply }}
    name: Terraform Apply
    runs-on: self-hosted
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses:
          actions/checkout@v3

          # https://github.com/actions/setup-node
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        #access vault for creds
      
      - name: Import Secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_HOST }}
          tlsSkipVerify: true
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            pylot/data/cluster_info VAULT_ADDR | TF_VAR_VAULT_ADDR ;
            pylot/data/cluster_info ROLE_ID | TF_VAR_VAULT_ROLE_ID ;
            pylot/data/cluster_info SECRET_ID | TF_VAR_VAULT_SECRET_ID ;

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
